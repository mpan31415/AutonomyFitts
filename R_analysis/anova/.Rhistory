#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
# ## define custom median function
# plot.median <- function(x) {
#   m <- median(x)
#   c(y = m, ymin = m, ymax = m)
# }
#
# ## define custom mean function
# plot.median <- function(x) {
#   m <- mean(x)
#   c(y = m, ymin = m, ymax = m)
# }
#
# ######################### cool dot plot 2 #########################
# p <- ggplot(task_df,aes(x=order,y=time, fill=order)) + geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=0.6) +
#                     labs( x = "Order", y = "NASA-TLX", fill = "Order") + theme_minimal() +
# stat_summary(fun.y = mean, geom="crossbar", colour="red", width=0.5, size=0.5) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 18, face = "bold"),
#         axis.title.y = element_text(size = 18, face = "bold"),
#         axis.text = element_text(size = 18),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy, ) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 18), legend.position = "none")
#
# p
#
# ggexport(p, filename = "pdfs/tlx.pdf")
# bxp <- ggboxplot(task_df, x = "condition", y = "time", add = "point")
# bxp
# # ggexport(bxp, filename = "tlx.png")
#
# task_df %>%
#   ggplot( aes(x=condition, y=time)) +
#     geom_line() +
#     geom_point()
bxp <- ggboxplot(
task_df, x = "ring_id", y = "eff_id",
color = "auto_level", palette = "jco"
)
bxp
######################### check for outliers #########################
task_df %>%
group_by(auto_level, ring_id) %>%
identify_outliers(eff_id)
######################### check normality #########################
task_df %>%
group_by(auto_level, ring_id) %>%
shapiro_test(eff_id)
######################### plot normality #########################
ggqqplot(task_df, "eff_id", ggtheme = theme_bw()) +
facet_grid(ring_id ~ auto_level, labeller = "label_both")
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(
data = task_df, dv = eff_id, wid = part_id,
within = c(auto_level, ring_id)
)
get_anova_table(res.aov)
#################### Effect of auto_level for each ring_id ####################
one.way <- task_df %>%
group_by(ring_id) %>%
anova_test(dv = eff_id, wid = part_id, within = auto_level) %>%
get_anova_table() %>%
adjust_pvalue(method = "bonferroni")
one.way
#################### Effect of ring_id for each auto_level ####################
one.way <- task_df %>%
group_by(auto_level) %>%
anova_test(dv = eff_id, wid = part_id, within = ring_id) %>%
get_anova_table() %>%
adjust_pvalue(method = "bonferroni")
one.way
#################### Pairwise comparisons between auto_level groups ####################
pwc <- task_df %>%
group_by(ring_id) %>%
pairwise_t_test(
eff_id ~ auto_level, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
#################### Pairwise comparisons between auto_level groups ####################
pwc <- task_df %>%
group_by(auto_level) %>%
pairwise_t_test(
eff_id ~ ring_id, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(auto_level, ring_id) %>%
get_summary_stats(eff_auto_num, type = "mean_sd")
# ######################### cool box plot (courtesy of Sarah) #########################
# ggplot(task_df,aes(x=order,y=time, fill=order))+geom_boxplot(aes(fill=order)) + labs( x = "Order", y = "time", fill = "Order") +   theme_minimal() +
# # stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 14, face = "bold"),
#         axis.title.y = element_text(size = 14, face = "bold"),
# axis.text = element_text(size = 16),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
# ######################### cool box plot (courtesy of Sarah) #########################
# ggplot(task_df,aes(x=auto_level,y=eff_auto_num, fill=auto_level))+geom_boxplot(aes(fill=auto_level)) + labs( x = "auto_level", y = "eff_auto_num", fill = "auto_level") +   theme_minimal() +
# stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 14, face = "bold"),
#         axis.title.y = element_text(size = 14, face = "bold"),
# axis.text = element_text(size = 16),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ ring_id) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
#
#
# ######################### cool dot plot #########################
# ggplot(task_df,aes(x=order,y=time, fill=order)) + geom_boxplot() + geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=1.2) +
#                     labs( x = "Order", y = "time", fill = "Order") + theme_minimal() +
# # stat_summary(fun = mean, geom = "point",size = 3, shape = 2, position = position_dodge(0.75), show.legend = FALSE) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 14, face = "bold"),
#         axis.title.y = element_text(size = 14, face = "bold"),
#         axis.text = element_text(size = 16),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 12), legend.position = "none")
# ## define custom median function
# plot.median <- function(x) {
#   m <- median(x)
#   c(y = m, ymin = m, ymax = m)
# }
#
# ## define custom mean function
# plot.median <- function(x) {
#   m <- mean(x)
#   c(y = m, ymin = m, ymax = m)
# }
#
# ######################### cool dot plot 2 #########################
# p <- ggplot(task_df,aes(x=order,y=time, fill=order)) + geom_dotplot(binaxis='y', stackdir='center', stackratio=1.5, dotsize=0.6) +
#                     labs( x = "Order", y = "NASA-TLX", fill = "Order") + theme_minimal() +
# stat_summary(fun.y = mean, geom="crossbar", colour="red", width=0.5, size=0.5) +
# scale_fill_brewer(palette = "Set2") +
#     theme(plot.title = element_text(size = 15, face = "bold"),
#         axis.title.x = element_text(size = 18, face = "bold"),
#         axis.title.y = element_text(size = 18, face = "bold"),
#         axis.text = element_text(size = 18),
#         legend.title = element_text(size = 12),
#         legend.text = element_text(size = 11),
#         legend.position= "none") +
#   facet_grid(. ~ autonomy, ) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1),
#         strip.text.x = element_text(angle = 0, hjust = 0.5, size = 18), legend.position = "none")
#
# p
#
# ggexport(p, filename = "pdfs/tlx.pdf")
# bxp <- ggboxplot(task_df, x = "condition", y = "time", add = "point")
# bxp
# # ggexport(bxp, filename = "tlx.png")
#
# task_df %>%
#   ggplot( aes(x=condition, y=time)) +
#     geom_line() +
#     geom_point()
bxp <- ggboxplot(
task_df, x = "ring_id", y = "eff_auto_num",
color = "auto_level", palette = "jco"
)
bxp
# ######################### check for outliers #########################
# task_df %>%
#   group_by(auto_level, ring_id) %>%
#   identify_outliers(eff_auto_num)
#
# ######################### check normality #########################
# task_df %>%
#   group_by(auto_level, ring_id) %>%
#   shapiro_test(eff_auto_num)
#
# ######################### plot normality #########################
# ggqqplot(task_df, "eff_auto_num", ggtheme = theme_bw()) +
#   facet_grid(ring_id ~ auto_level, labeller = "label_both")
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(
data = task_df, dv = eff_auto_num, wid = part_id,
within = c(auto_level, ring_id)
)
get_anova_table(res.aov)
#################### Effect of auto_level for each ring_id ####################
one.way <- task_df %>%
group_by(ring_id) %>%
anova_test(dv = eff_auto_num, wid = part_id, within = auto_level) %>%
get_anova_table() %>%
adjust_pvalue(method = "bonferroni")
one.way
# #################### Effect of ring_id for each auto_level ####################
# one.way <- task_df %>%
#   group_by(auto_level) %>%
#   anova_test(dv = eff_auto_num, wid = part_id, within = ring_id) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#################### Pairwise comparisons between auto_level groups ####################
pwc <- task_df %>%
group_by(ring_id) %>%
pairwise_t_test(
eff_auto_num ~ auto_level, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
#################### Pairwise comparisons between auto_level groups ####################
pwc <- task_df %>%
group_by(auto_level) %>%
pairwise_t_test(
eff_auto_num ~ ring_id, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id1", "med_fitts_id2", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### scatterplot #########################
p <- ggscatter(task_df, x = "auto_num", y = "eff_auto_num",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "Autonomy", ylab = "Effective Autonomy"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
######################### correlation test #########################
res <- cor.test(task_df$auto_num, task_df$eff_auto_num,
method = "pearson")
res
###### fit linear mixed model 1 ######
model <- lmer(eff_auto_num ~ auto_num * fitts_id_num + (1 | part_id),
data = task_df)
summary(model)
# anova(model)
# interact_plot(model, pred = fitts_id_num, modx = auto_num, interval = TRUE, int.width = 0.8)
# interact_plot(model, pred = fitts_id_num, modx = auto_num, plot.points = TRUE, interval = TRUE, int.width = 0.8)
# interact_plot(model, pred = auto_num, modx = fitts_id_num, interval = TRUE, int.width = 0.8)
###### fit linear mixed model 2 ######
fit <- lm(eff_auto_num ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Effective Autonomy",
modx.labels = c("low", "med", "high")
)
###### fit linear mixed model 3 ######
fit3 <- lm(eff_auto_num ~ auto_num * fitts_id_level, data = task_df)
# summary(fit3)
interact_plot(fit3, pred = auto_num, modx = fitts_id_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Autonomy", y.label="Effective Autonomy",
modx.labels = c("low", "med1", "med2", "high")
)
###### correlation by autonomy group ######
correlation_by_group <- task_df %>%
group_by(ring_id) %>%
summarise(correlation = cor(auto_num, eff_auto_num))
print(correlation_by_group)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id1", "med_fitts_id2", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### scatterplot #########################
p <- ggscatter(task_df, x = "fitts_id_num", y = "eff_id",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "Fitts ID", ylab = "Effective ID"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
######################### correlation test #########################
res <- cor.test(task_df$fitts_id_num, task_df$eff_id,
method = "pearson")
res
###### fit linear mixed model 1 ######
model <- lmer(eff_id ~ fitts_id_num * auto_num + (1 | part_id),
data = task_df)
summary(model)
# anova(model)
# interact_plot(model, pred = fitts_id_num, modx = auto_num, interval = TRUE, int.width = 0.8)
# interact_plot(model, pred = fitts_id_num, modx = auto_num, plot.points = TRUE, interval = TRUE, int.width = 0.8)
# interact_plot(model, pred = auto_num, modx = fitts_id_num, interval = TRUE, int.width = 0.8)
###### fit linear mixed model 2 ######
fit <- lm(eff_id ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Effective Fitts ID",
modx.labels = c("low", "med", "high")
)
###### fit linear mixed model 3 ######
fit3 <- lm(eff_id ~ auto_num * fitts_id_level, data = task_df)
# summary(fit3)
interact_plot(fit3, pred = auto_num, modx = fitts_id_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Autonomy", y.label="Effective Fitts ID",
modx.labels = c("low", "med1", "med2", "high")
)
###### correlation by autonomy group ######
correlation_by_group <- task_df %>%
group_by(auto_level) %>%
summarise(correlation = cor(fitts_id_num, eff_id))
print(correlation_by_group)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id1", "med_fitts_id2", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### scatterplot #########################
p <- ggscatter(task_df, x = "mdmt_ave", y = "single_trust",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "Averaged MDMT", ylab = "Single-Scale Trust"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
# ######################### scatterplot #########################
# ggscatter(task_df, x = "traj_err", y = "p_trust",
#           add = "reg.line",                                 # Add regression line
#           conf.int = TRUE,                                  # Add confidence interval
#           add.params = list(color = "blue",
#                             fill = "lightgray"),
#           xlab = "Trajectory Tracking Error", ylab = "Single-Scale Trust"
#           )+
#   stat_cor(method = "pearson", label.x = 1, label.y = 7.5)  # Add correlation coefficient
######################### correlation test #########################
res <- cor.test(task_df$mdmt_ave, task_df$single_trust,
method = "pearson")
res
###### fit linear mixed model 1 ######
model <- lmer(single_trust ~ mdmt_ave * auto_num + (1 | part_id),
data = task_df)
summary(model)
# anova(model)
# interact_plot(model, pred = fitts_id_num, modx = auto_num, interval = TRUE, int.width = 0.8)
# interact_plot(model, pred = fitts_id_num, modx = auto_num, plot.points = TRUE, interval = TRUE, int.width = 0.8)
# interact_plot(model, pred = auto_num, modx = fitts_id_num, interval = TRUE, int.width = 0.8)
###### fit linear mixed model 2 ######
fit <- lm(single_trust ~ mdmt_ave * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = mdmt_ave, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Averaged MDMT", y.label="Single-Scale Trust",
modx.labels = c("low", "med", "high")
)
###### fit linear mixed model 3 ######
fit3 <- lm(single_trust ~ mdmt_ave * fitts_id_level, data = task_df)
# summary(fit)
interact_plot(fit3, pred = mdmt_ave, modx = fitts_id_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Averaged MDMT", y.label="Single-Scale Trust",
modx.labels = c("low", "med1", "med2", "high")
)
###### correlation by autonomy group ######
correlation_by_group <- task_df %>%
group_by(ring_id) %>%
summarise(correlation = cor(auto_num, eff_auto_num))
print(correlation_by_group)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id1", "med_fitts_id2", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### scatterplot #########################
p <- ggscatter(task_df, x = "eff_id", y = "tlx_ave",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "Effective Fitts ID", ylab = "Averaged NASA-TLX"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
######################### correlation test #########################
res <- cor.test(task_df$eff_id, task_df$tlx_ave,
method = "pearson")
res
###### fit linear mixed model 1 ######
model <- lmer(tlx_ave ~ eff_id * auto_num + (1 | part_id),
data = task_df)
summary(model)
# anova(model)
# interact_plot(model, pred = fitts_id_num, modx = auto_num, interval = TRUE, int.width = 0.8)
# interact_plot(model, pred = fitts_id_num, modx = auto_num, plot.points = TRUE, interval = TRUE, int.width = 0.8)
# interact_plot(model, pred = auto_num, modx = fitts_id_num, interval = TRUE, int.width = 0.8)
###### fit linear mixed model 2 ######
fit <- lm(tlx_ave ~ eff_id * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = eff_id, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Effective Fitts ID", y.label="Averaged NASA-TLX",
modx.labels = c("low", "med", "high")
)
# ###### fit linear mixed model 3 ######
# fit3 <- lm(eff_id ~ auto_num * fitts_id_level, data = task_df)
# # summary(fit3)
# interact_plot(fit3, pred = auto_num, modx = fitts_id_level,
#               interval = TRUE, int.type = "confidence", int.width = .8,
#               plot.points = TRUE,
#               x.label="Autonomy", y.label="Effective Fitts ID",
#               modx.labels = c("low", "med1", "med2", "high")
#               )
###### correlation by autonomy group ######
correlation_by_group <- task_df %>%
group_by(auto_level) %>%
summarise(correlation = cor(eff_id, tlx_ave))
print(correlation_by_group)
