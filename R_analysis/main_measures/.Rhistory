bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "tlx_ave",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Difficulty", ylab = "Averaged NASA-TLX"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = 0.0, step.increase = 0.1, label.size = 5, vjust = 0.0,
tip.length = 0.03, y.position = 11
)
bxp3
new_auto_levels_order <- c("low", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("low", "med1", "med2", "high")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
tlx_ave ~ Difficulty, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "tlx_ave",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Difficulty", ylab = "Averaged NASA-TLX"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.07, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 3
)
bxp3
ggsave(file="tlx_average.png", plot=bxp3, width=5, height=4)
new_auto_levels_order <- c("low", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("low", "med1", "med2", "high")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
tlx_ave ~ Difficulty, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "tlx_ave",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Difficulty", ylab = "Averaged NASA-TLX"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.07, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 12
)
bxp3
ggsave(file="tlx_average.png", plot=bxp3, width=5, height=4)
new_auto_levels_order <- c("low", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("low", "med1", "med2", "high")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
tlx_ave ~ Difficulty, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "tlx_ave",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Difficulty", ylab = "Averaged NASA-TLX"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.07, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 15
)
bxp3
ggsave(file="tlx_average.png", plot=bxp3, width=5, height=4)
new_auto_levels_order <- c("low", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("low", "med1", "med2", "high")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
tlx_ave ~ Difficulty, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "tlx_ave",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Difficulty", ylab = "Averaged NASA-TLX"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.05, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 16
)
bxp3
ggsave(file="tlx_average.png", plot=bxp3, width=5, height=4)
knitr::opts_chunk$set(echo = TRUE)
new_auto_levels_order <- c("low", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("low", "med1", "med2", "high")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
mdmt_ave ~ Difficulty, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "mdmt_ave",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Difficulty", ylab = "Averaged MDMT"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.05, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 16
)
bxp3
ggsave(file="mdmt_average.png", plot=bxp3, width=5, height=4)
new_auto_levels_order <- c("low", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("low", "med1", "med2", "high")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
mdmt_ave ~ Difficulty, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "mdmt_ave",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Difficulty", ylab = "Averaged MDMT"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.05, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 9
)
bxp3
ggsave(file="mdmt_average.png", plot=bxp3, width=5, height=4)
new_auto_levels_order <- c("low", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("low", "med1", "med2", "high")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
mdmt_ave ~ Difficulty, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "mdmt_ave",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Difficulty", ylab = "Averaged MDMT"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.05, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 10
)
bxp3
ggsave(file="mdmt_average.png", plot=bxp3, width=5, height=4)
new_auto_levels_order <- c("low", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("low", "med1", "med2", "high")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
mdmt_ave ~ Difficulty, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "mdmt_ave",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Difficulty", ylab = "Averaged MDMT"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.05, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 9.5
)
bxp3
ggsave(file="mdmt_average.png", plot=bxp3, width=5, height=4)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
# library(viridis)
# library(hrbrthemes)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
# library(viridis)
# library(hrbrthemes)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id2", "med_fitts_id1", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(auto_level, ring_id) %>%
get_summary_stats(average_mt, type = "mean_sd")
# ###### fit linear mixed model 0 - EXCLUDING THE INTERACTION TERM ######
model <- lmer(average_mt ~ auto_num + fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
# ###### fit linear mixed model 1 ######
model <- lmer(average_mt ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(average_mt ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Move time (s)",
modx.labels = c("low", "med", "high")
)
rsq.lmm(fit, adj=FALSE)
# ###### fit linear mixed model 0 - EXCLUDING THE INTERACTION TERM ######
model <- lmer(average_mt ~ auto_num + fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
# ###### fit linear mixed model 1 ######
model <- lmer(average_mt ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(average_mt ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Move time (s)",
modx.labels = c("low", "med", "high")
)
rsq(fit, adj=FALSE)
# ###### fit linear mixed model 0 - EXCLUDING THE INTERACTION TERM ######
model <- lmer(average_mt ~ auto_num + fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
# ###### fit linear mixed model 1 ######
model <- lmer(average_mt ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(average_mt ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Move time (s)",
modx.labels = c("low", "med", "high")
)
require(lme4)
rsq(fit, adj=FALSE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
# library(viridis)
# library(hrbrthemes)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
# library(lmerTest)
# library(viridis)
# library(hrbrthemes)
# ###### fit linear mixed model 0 - EXCLUDING THE INTERACTION TERM ######
model <- lmer(average_mt ~ auto_num + fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
# ###### fit linear mixed model 1 ######
model <- lmer(average_mt ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(average_mt ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Move time (s)",
modx.labels = c("low", "med", "high")
)
rsq(fit, adj=FALSE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
# library(viridis)
# library(hrbrthemes)
# ###### fit linear mixed model 0 - EXCLUDING THE INTERACTION TERM ######
model <- lmer(average_mt ~ auto_num + fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
# ###### fit linear mixed model 1 ######
model <- lmer(average_mt ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(average_mt ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Move time (s)",
modx.labels = c("low", "med", "high")
)
rsq(fit, adj=FALSE)
# ###### fit linear mixed model 0 - EXCLUDING THE INTERACTION TERM ######
model <- lmer(average_mt ~ auto_num + fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
# ###### fit linear mixed model 1 ######
model <- lmer(average_mt ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(average_mt ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Move time (s)",
modx.labels = c("low", "med", "high")
)
tab_model(fit.lme)
# ###### fit linear mixed model 0 - EXCLUDING THE INTERACTION TERM ######
model <- lmer(average_mt ~ auto_num + fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
# ###### fit linear mixed model 1 ######
model <- lmer(average_mt ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(average_mt ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Move time (s)",
modx.labels = c("low", "med", "high")
)
library(sjPlot)
# ###### fit linear mixed model 0 - EXCLUDING THE INTERACTION TERM ######
model <- lmer(average_mt ~ auto_num + fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
# ###### fit linear mixed model 1 ######
model <- lmer(average_mt ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(average_mt ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Move time (s)",
modx.labels = c("low", "med", "high")
)
library(sjstats)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
# library(viridis)
# library(hrbrthemes)
install.packages(sjPlot)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
# library(viridis)
# library(hrbrthemes)
install.packages(MuMIn)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
# library(viridis)
# library(hrbrthemes)
install.packages("MuMIn")
# ###### fit linear mixed model 0 - EXCLUDING THE INTERACTION TERM ######
model <- lmer(average_mt ~ auto_num + fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
# ###### fit linear mixed model 1 ######
model <- lmer(average_mt ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(average_mt ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Move time (s)",
modx.labels = c("low", "med", "high")
)
library(MuMIn)
r.squaredGLMM(fit)
