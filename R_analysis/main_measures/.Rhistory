# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(auto_level, ring_id) %>%
get_summary_stats(average_mt, type = "mean_sd")
bxp1 <- ggboxplot(
task_df, x = "fitts_id_level", y = "average_mt",
color = "auto_level", palette = "jco"
)
bxp1
# # Plot
# task_df %>%
#   ggplot( aes(x=fitts_id_level, y=average_mt, fill=auto_level)) +
#     geom_boxplot() +
#     scale_fill_viridis(discrete = TRUE, alpha=0.6) +
#     geom_jitter(color="black", size=0.4, alpha=0.9) +
#     theme_ipsum() +
#     theme(
#       legend.position="none",
#       plot.title = element_text(size=11)
#     ) +
#     ggtitle("A boxplot with jitter") +
#     xlab("")
new_auto_levels_order <- c("low", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("low", "med1", "med2", "high")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
average_mt ~ Difficulty, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "average_mt",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Difficulty", ylab = "Movement Time (s)"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.07, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 3
)
bxp3
ggsave(file="movement_time.png", plot=bxp3, width=5, height=7)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id2", "med_fitts_id1", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(auto_level, ring_id) %>%
get_summary_stats(per_auto, type = "mean_sd")
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(
data = task_df, dv = per_auto, wid = part_id,
within = c(auto_level, ring_id)
)
get_anova_table(res.aov)
# #################### Effect of auto_level for each ring_id ####################
# one.way <- task_df %>%
#   group_by(ring_id) %>%
#   anova_test(dv = per_auto, wid = part_id, within = auto_level) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#
# #################### Effect of ring_id for each auto_level ####################
# one.way <- task_df %>%
#   group_by(auto_level) %>%
#   anova_test(dv = per_auto, wid = part_id, within = ring_id) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#################### Pairwise comparisons between auto_level groups for each ring_id ####################
pwc1 <- task_df %>%
group_by(fitts_id_level) %>%
pairwise_t_test(
per_auto ~ auto_level, paired = TRUE,
p.adjust.method = "holm"
)
pwc1
# Create a box plot
pwc1 <- pwc1 %>% add_xy_position(x = "auto_level", group = "fitts_id_level")
bxp2 <- ggboxplot(
task_df, x = "auto_level", y = "per_auto",
color = "fitts_id_level", palette = "jco"
) +
stat_pvalue_manual(
pwc1, color = "fitts_id_level", group.by = "legend.var",
bracket.nudge.y = 0.2, step.increase = 0.15, label.size = 3, vjust = 0.1,
tip.length = 0, y.position = 20
)
bxp2
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(auto_level) %>%
pairwise_t_test(
per_auto ~ fitts_id_level, paired = TRUE,
p.adjust.method = "holm"
)
pwc2
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "fitts_id_level", group = "auto_level")
bxp3 <- ggboxplot(
task_df, x = "fitts_id_level", y = "per_auto",
color = "auto_level", palette = "jco"
) +
stat_pvalue_manual(
pwc2, color = "auto_level", group.by = "legend.var",
bracket.nudge.y = 0.2, step.increase = 0.5, label.size = 3, vjust = 0.1,
tip.length = 0, y.position = 20
)
bxp3
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id2", "med_fitts_id1", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(auto_level, ring_id) %>%
get_summary_stats(average_mt, type = "mean_sd")
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(
data = task_df, dv = average_mt, wid = part_id,
within = c(auto_level, fitts_id_level)
)
get_anova_table(res.aov)
# #################### Effect of auto_level for each ring_id ####################
# one.way <- task_df %>%
#   group_by(ring_id) %>%
#   anova_test(dv = average_mt, wid = part_id, within = auto_level) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#
# #################### Effect of ring_id for each auto_level ####################
# one.way <- task_df %>%
#   group_by(auto_level) %>%
#   anova_test(dv = average_mt, wid = part_id, within = ring_id) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#################### Pairwise comparisons between auto_level groups for each ring_id ####################
pwc1 <- task_df %>%
group_by(fitts_id_level) %>%
pairwise_t_test(
average_mt ~ auto_level, paired = TRUE,
p.adjust.method = "holm"
)
pwc1
# Create a box plot
pwc1 <- pwc1 %>% add_xy_position(x = "auto_level", group = "fitts_id_level")
bxp2 <- ggboxplot(
task_df, x = "auto_level", y = "average_mt",
color = "fitts_id_level", palette = "jco"
) +
stat_pvalue_manual(
pwc1, color = "fitts_id_level", group.by = "legend.var",
bracket.nudge.y = 0.2, step.increase = 0.15, label.size = 3, vjust = 0.1,
tip.length = 0, y.position = 20
)
bxp2
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(auto_level) %>%
pairwise_t_test(
average_mt ~ fitts_id_level, paired = TRUE,
p.adjust.method = "holm"
)
pwc2
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "fitts_id_level", group = "auto_level")
bxp3 <- ggboxplot(
task_df, x = "fitts_id_level", y = "average_mt",
color = "auto_level", palette = "jco"
) +
stat_pvalue_manual(
pwc2, color = "auto_level", group.by = "legend.var",
bracket.nudge.y = 0.2, step.increase = 0.5, label.size = 3, vjust = 0.1,
tip.length = 0, y.position = 20
)
bxp3
knitr::opts_chunk$set(echo = TRUE)
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(
data = task_df, dv = mdmt_ave, wid = part_id,
within = c(auto_level, fitts_id_level)
)
get_anova_table(res.aov)
# #################### Effect of auto_level for each ring_id ####################
# one.way <- task_df %>%
#   group_by(ring_id) %>%
#   anova_test(dv = mdmt_ave, wid = part_id, within = auto_level) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#
# #################### Effect of ring_id for each auto_level ####################
# one.way <- task_df %>%
#   group_by(auto_level) %>%
#   anova_test(dv = mdmt_ave, wid = part_id, within = ring_id) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#################### Pairwise comparisons between auto_level groups for each ring_id ####################
pwc1 <- task_df %>%
group_by(fitts_id_level) %>%
pairwise_t_test(
mdmt_ave ~ auto_level, paired = TRUE,
p.adjust.method = "holm"
)
pwc1
# Create a box plot
pwc1 <- pwc1 %>% add_xy_position(x = "auto_level", group = "fitts_id_level")
bxp2 <- ggboxplot(
task_df, x = "auto_level", y = "mdmt_ave",
color = "fitts_id_level", palette = "jco"
) +
stat_pvalue_manual(
pwc1, color = "fitts_id_level", group.by = "legend.var",
bracket.nudge.y = 0.2, step.increase = 0.15, label.size = 3, vjust = 0.1,
tip.length = 0, y.position = 20
)
bxp2
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(auto_level) %>%
pairwise_t_test(
mdmt_ave ~ fitts_id_level, paired = TRUE,
p.adjust.method = "holm"
)
pwc2
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "fitts_id_level", group = "auto_level")
bxp3 <- ggboxplot(
task_df, x = "fitts_id_level", y = "mdmt_ave",
color = "auto_level", palette = "jco"
) +
stat_pvalue_manual(
pwc2, color = "auto_level", group.by = "legend.var",
bracket.nudge.y = 0.2, step.increase = 0.5, label.size = 3, vjust = 0.1,
tip.length = 0, y.position = 20
)
bxp3
new_auto_levels_order <- c("low", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("low", "med1", "med2", "high")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
average_mt ~ Difficulty, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "average_mt",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Difficulty", ylab = "Movement Time (s)"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.07, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 3
)
bxp3
ggsave(file="movement_time.svg", plot=bxp3, width=5, height=7)
new_auto_levels_order <- c("low", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("low", "med1", "med2", "high")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
average_mt ~ Difficulty, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "average_mt",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Difficulty", ylab = "Movement Time (s)"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.07, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 3
)
bxp3
ggsave(file="movement_time.pdf", plot=bxp3, width=5, height=7)
new_auto_levels_order <- c("low", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("low", "med1", "med2", "high")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
average_mt ~ Difficulty, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "average_mt",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Difficulty", ylab = "Movement Time (s)"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.07, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 3, color = "Autonomy"
)
bxp3
ggsave(file="movement_time.pdf", plot=bxp3, width=5, height=7)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id2", "med_fitts_id1", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(auto_level, ring_id) %>%
get_summary_stats(average_mt, type = "mean_sd")
new_auto_levels_order <- c("none", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("1", "2", "3", "4")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
average_mt ~ Difficulty, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "average_mt",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Difficulty", ylab = "Movement Time (s)"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.07, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 3, color = "Autonomy"
)
bxp3
ggsave(file="movement_time.pdf", plot=bxp3, width=5, height=7)
new_auto_levels_order <- c("none", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("1", "2", "3", "4")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
average_mt ~ Difficulty, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "average_mt",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Ring No.", ylab = "Movement Time (s)"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.07, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 3, color = "Autonomy"
)
bxp3
ggsave(file="movement_time.pdf", plot=bxp3, width=5, height=7)
new_auto_levels_order <- c("none", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("1", "2", "3", "4")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
average_mt ~ Difficulty, paired = TRUE,
p.adjust.method = "holm"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "average_mt",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Ring No.", ylab = "Movement Time (s)"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.07, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 3, color = "Autonomy"
)
bxp3
ggsave(file="movement_time.pdf", plot=bxp3, width=5, height=7)
knitr::opts_chunk$set(echo = TRUE)
new_auto_levels_order <- c("none", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("1", "2", "3", "4")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
tlx_ave ~ Difficulty, paired = TRUE,
p.adjust.method = "holm"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "tlx_ave",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Ring No.", ylab = "Averaged NASA-TLX"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.05, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 16, color = "Autonomy"
)
bxp3
ggsave(file="tlx_average.pdf", plot=bxp3, width=5, height=5)
new_auto_levels_order <- c("none", "med", "high")  # Replace these with your actual level names
new_fitts_id_levels_order <- c("1", "2", "3", "4")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$Autonomy <- factor(task_df$Autonomy, levels = new_auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$Difficulty <- factor(task_df$Difficulty, levels = new_fitts_id_levels_order)
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(Autonomy) %>%
pairwise_t_test(
mdmt_ave ~ Difficulty, paired = TRUE,
p.adjust.method = "holm"
)
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "Difficulty", group = "Autonomy")
bxp3 <- ggboxplot(
task_df, x = "Difficulty", y = "mdmt_ave",
fill = "Autonomy", palette = c("#00AFBB", "#E7B800", "#FC4E07"),
xlab = "Ring No.", ylab = "Averaged MDMT"
) +
stat_pvalue_manual(
pwc2, group.by = "legend.var", hide.ns = TRUE,
bracket.nudge.y = -0.1, step.increase = 0.05, label.size = 4, vjust = 0.7,
tip.length = 0.02, y.position = 9.5, color = "Autonomy"
)
bxp3
ggsave(file="mdmt_average.pdf", plot=bxp3, width=5, height=5)
