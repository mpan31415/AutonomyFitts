interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Perceived Autonomy",
modx.labels = c("low", "med", "high")
)
View(task_df)
View(task_df)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id1", "med_fitts_id2", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(auto_level, ring_id) %>%
get_summary_stats(eff_id, type = "mean_sd")
bxp1 <- ggboxplot(
task_df, x = "ring_id", y = "eff_id",
color = "auto_level", palette = "jco"
)
bxp1
######################### check for outliers #########################
task_df %>%
group_by(auto_level, ring_id) %>%
identify_outliers(eff_id)
######################### check normality #########################
task_df %>%
group_by(auto_level, ring_id) %>%
shapiro_test(eff_id)
######################### plot normality #########################
ggqqplot(task_df, "eff_id", ggtheme = theme_bw()) +
facet_grid(ring_id ~ auto_level, labeller = "label_both")
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(
data = task_df, dv = eff_id, wid = part_id,
within = c(auto_level, ring_id)
)
get_anova_table(res.aov)
# #################### Effect of auto_level for each ring_id ####################
# one.way <- task_df %>%
#   group_by(ring_id) %>%
#   anova_test(dv = eff_id, wid = part_id, within = auto_level) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#
# #################### Effect of ring_id for each auto_level ####################
# one.way <- task_df %>%
#   group_by(auto_level) %>%
#   anova_test(dv = eff_id, wid = part_id, within = ring_id) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#################### Pairwise comparisons between auto_level groups for each ring_id ####################
pwc1 <- task_df %>%
group_by(fitts_id_level) %>%
pairwise_t_test(
eff_id ~ auto_level, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc1
# Create a box plot
pwc1 <- pwc1 %>% add_xy_position(x = "auto_level", group = "fitts_id_level")
bxp2 <- ggboxplot(
task_df, x = "auto_level", y = "eff_id",
color = "fitts_id_level", palette = "jco"
) +
stat_pvalue_manual(
pwc1, color = "fitts_id_level", group.by = "legend.var",
bracket.nudge.y = 0.2, step.increase = 0.15, label.size = 3, vjust = 0.1,
tip.length = 0, y.position = 20
)
bxp2
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(auto_level) %>%
pairwise_t_test(
eff_id ~ fitts_id_level, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc2
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "fitts_id_level", group = "auto_level")
bxp3 <- ggboxplot(
task_df, x = "fitts_id_level", y = "eff_id",
color = "auto_level", palette = "jco"
) +
stat_pvalue_manual(
pwc2, color = "auto_level", group.by = "legend.var",
bracket.nudge.y = 0.2, step.increase = 0.5, label.size = 3, vjust = 0.1,
tip.length = 0, y.position = 20
)
bxp3
# ###### fit linear mixed model 1 ######
model <- lmer(eff_id ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(eff_id ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Effective Fitts ID",
modx.labels = c("low", "med", "high")
)
# ###### fit linear mixed model 1 ######
model <- lmer(eff_id ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(eff_id ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Effective Fitts ID",
modx.labels = c("low", "med", "high")
)
# ###### fit linear mixed model 1 ######
model <- lmer(eff_id ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(eff_id ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Effective Fitts ID",
modx.labels = c("low", "med", "high")
)
# ###### fit linear mixed model 1 ######
model <- lmer(eff_id ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(eff_id ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Effective Fitts ID",
modx.labels = c("low", "med", "high")
)
######################### scatterplot #########################
p <- ggscatter(task_df, x = "fitts_id_num", y = "eff_id",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "Fitts ID", ylab = "Effective Fitts ID"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
######################### correlation test #########################
res <- cor.test(task_df$fitts_id_num, task_df$eff_id,
method = "pearson")
res
# ###### fit linear mixed model 1 ######
model <- lmer(eff_id ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(eff_id ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Effective Fitts ID",
modx.labels = c("low", "med", "high")
)
######################### scatterplot #########################
p <- ggscatter(task_df, x = "fitts_id_num", y = "eff_id",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "Fitts ID", ylab = "Effective Fitts ID"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
######################### correlation test #########################
res <- cor.test(task_df$fitts_id_num, task_df$eff_id,
method = "pearson")
res
###### correlation by autonomy group ######
correlation_by_group <- task_df %>%
group_by(ring_id) %>%
summarise(correlation = cor(auto_num, eff_auto_num))
print(correlation_by_group)
# ###### fit linear mixed model 1 ######
model <- lmer(eff_id ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(eff_id ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Effective Fitts ID",
modx.labels = c("low", "med", "high")
)
######################### scatterplot #########################
p <- ggscatter(task_df, x = "fitts_id_num", y = "eff_id",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "Fitts ID", ylab = "Effective Fitts ID"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
######################### correlation test #########################
res <- cor.test(task_df$fitts_id_num, task_df$eff_id,
method = "pearson")
res
###### correlation by ring group ######
correlation_by_group <- task_df %>%
group_by(auto_level) %>%
summarise(correlation = cor(fitts_id_num, eff_id))
print(correlation_by_group)
View(task_df)
View(task_df)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id1", "med_fitts_id2", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(auto_level, ring_id) %>%
get_summary_stats(eff_auto_num, type = "mean_sd")
bxp1 <- ggboxplot(
task_df, x = "ring_id", y = "eff_auto_num",
color = "auto_level", palette = "jco"
)
bxp1
######################### check for outliers #########################
task_df %>%
group_by(auto_level, ring_id) %>%
identify_outliers(eff_auto_num)
######################### check normality #########################
task_df %>%
group_by(auto_level, ring_id) %>%
shapiro_test(eff_auto_num)
######################### check for outliers #########################
task_df %>%
group_by(auto_level, ring_id) %>%
identify_outliers(eff_auto_num)
# ######################### check normality #########################
# task_df %>%
#   group_by(auto_level, ring_id) %>%
#   shapiro_test(eff_auto_num)
######################### plot normality #########################
ggqqplot(task_df, "eff_auto_num", ggtheme = theme_bw()) +
facet_grid(ring_id ~ auto_level, labeller = "label_both")
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(
data = task_df, dv = eff_auto_num, wid = part_id,
within = c(auto_level, ring_id)
)
get_anova_table(res.aov)
# #################### Effect of auto_level for each ring_id ####################
# one.way <- task_df %>%
#   group_by(ring_id) %>%
#   anova_test(dv = eff_auto_num, wid = part_id, within = auto_level) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#
# #################### Effect of ring_id for each auto_level ####################
# one.way <- task_df %>%
#   group_by(auto_level) %>%
#   anova_test(dv = eff_auto_num, wid = part_id, within = ring_id) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#################### Pairwise comparisons between auto_level groups for each ring_id ####################
pwc1 <- task_df %>%
group_by(fitts_id_level) %>%
pairwise_t_test(
eff_auto_num ~ auto_level, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc1
# Create a box plot
pwc1 <- pwc1 %>% add_xy_position(x = "auto_level", group = "fitts_id_level")
bxp2 <- ggboxplot(
task_df, x = "auto_level", y = "eff_auto_num",
color = "fitts_id_level", palette = "jco"
) +
stat_pvalue_manual(
pwc1, color = "fitts_id_level", group.by = "legend.var",
bracket.nudge.y = 0.2, step.increase = 0.15, label.size = 3, vjust = 0.1,
tip.length = 0, y.position = 20
)
bxp2
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(auto_level) %>%
pairwise_t_test(
eff_auto_num ~ fitts_id_level, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc2
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "fitts_id_level", group = "auto_level")
bxp3 <- ggboxplot(
task_df, x = "fitts_id_level", y = "eff_auto_num",
color = "auto_level", palette = "jco"
) +
stat_pvalue_manual(
pwc2, color = "auto_level", group.by = "legend.var",
bracket.nudge.y = 0.2, step.increase = 0.5, label.size = 3, vjust = 0.1,
tip.length = 0, y.position = 20
)
bxp3
# ###### fit linear mixed model 1 ######
model <- lmer(eff_auto_num ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(eff_auto_num ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Effective Autonomy",
modx.labels = c("low", "med", "high")
)
######################### scatterplot #########################
p <- ggscatter(task_df, x = "fitts_id_num", y = "eff_auto_num",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "Fitts ID", ylab = "Effective Fitts ID"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
######################### correlation test #########################
res <- cor.test(task_df$fitts_id_num, task_df$eff_auto_num,
method = "pearson")
res
###### correlation by ring group ######
correlation_by_group <- task_df %>%
group_by(auto_level) %>%
summarise(correlation = cor(fitts_id_num, eff_auto_num))
print(correlation_by_group)
# ###### fit linear mixed model 1 ######
model <- lmer(eff_auto_num ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(eff_auto_num ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Effective Autonomy",
modx.labels = c("low", "med", "high")
)
######################### scatterplot #########################
p <- ggscatter(task_df, x = "auto_num", y = "eff_auto_num",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "Autonomy", ylab = "Effective Autonomy"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
######################### correlation test #########################
res <- cor.test(task_df$auto_num, task_df$eff_auto_num,
method = "pearson")
res
###### correlation by ring group ######
correlation_by_group <- task_df %>%
group_by(auto_level) %>%
summarise(correlation = cor(eff_auto_num, eff_auto_num))
print(correlation_by_group)
# ###### fit linear mixed model 1 ######
model <- lmer(eff_auto_num ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(eff_auto_num ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Effective Autonomy",
modx.labels = c("low", "med", "high")
)
######################### scatterplot #########################
p <- ggscatter(task_df, x = "auto_num", y = "eff_auto_num",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "Autonomy", ylab = "Effective Autonomy"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
######################### correlation test #########################
res <- cor.test(task_df$auto_num, task_df$eff_auto_num,
method = "pearson")
res
###### correlation by ring group ######
correlation_by_group <- task_df %>%
group_by(ring_id) %>%
summarise(correlation = cor(eff_auto_num, eff_auto_num))
print(correlation_by_group)
# ###### fit linear mixed model 1 ######
model <- lmer(eff_auto_num ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(eff_auto_num ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Effective Autonomy",
modx.labels = c("low", "med", "high")
)
######################### scatterplot #########################
p <- ggscatter(task_df, x = "auto_num", y = "eff_auto_num",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "Autonomy", ylab = "Effective Autonomy"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
######################### correlation test #########################
res <- cor.test(task_df$auto_num, task_df$eff_auto_num,
method = "pearson")
res
###### correlation by ring group ######
correlation_by_group <- task_df %>%
group_by(ring_id) %>%
summarise(correlation = cor(auto_num, eff_auto_num))
print(correlation_by_group)
