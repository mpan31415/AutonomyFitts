# interact_plot(model, pred = fitts_id_num, modx = auto_num, plot.points = TRUE, interval = TRUE, int.width = 0.8)
# interact_plot(model, pred = auto_num, modx = fitts_id_num, interval = TRUE, int.width = 0.8)
###### fit linear mixed model 2 ######
# fit <- lm(average_mt ~ adj_human_id, data = task_df)
# # summary(fit)
# interact_plot(fit, pred = adj_human_id, modx = auto_level,
#               interval = TRUE, int.type = "confidence", int.width = .8,
#               plot.points = TRUE,
#               x.label="Effective Fitts ID", y.label="Averaged NASA-TLX",
#               modx.labels = c("low", "med", "high")
#               )
# ###### fit linear mixed model 3 ######
# fit3 <- lm(eff_id ~ auto_num * fitts_id_level, data = task_df)
# # summary(fit3)
# interact_plot(fit3, pred = auto_num, modx = fitts_id_level,
#               interval = TRUE, int.type = "confidence", int.width = .8,
#               plot.points = TRUE,
#               x.label="Autonomy", y.label="Effective Fitts ID",
#               modx.labels = c("low", "med1", "med2", "high")
#               )
###### correlation by autonomy group ######
# correlation_by_group <- task_df %>%
#   group_by(auto_level) %>%
#   summarise(correlation = cor(eff_id, tlx_ave))
#
# print(correlation_by_group)
###### fit linear mixed model 2 (series combination) ######
model <- lmer(average_mt ~ series_mt + (1+auto_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 3 (parallel combination) ######
model <- lmer(average_mt ~ parallel_mt + (1+auto_num|part_id) + (1|part_id),
data = task_df)
summary(model)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id1", "med_fitts_id2", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### scatterplot #########################
p <- ggscatter(task_df, x = "arf_human_id", y = "arf_human_mt",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "ARF Human ID", ylab = "ARF Human Move Time (s)"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
######################### correlation test #########################
res <- cor.test(task_df$arf_human_id, task_df$arf_human_mt,
method = "pearson")
res
###### fit linear mixed model 1 ######
model <- lmer(arf_human_mt ~ arf_human_id + (1+auto_num|part_id) + (1|part_id),
data = task_df)
summary(model)
# plot a scatter plot
plot(task_df$arf_human_id,task_df$arf_human_mt,
main='Regression Plot',
xlab='ARF Human ID', ylab='ARF Human Move Time (s)', col=task_df$auto_level)
# plot a regression line
abline(lm(arf_human_mt ~ arf_human_id, data=task_df), col='red')
ggplot(task_df,aes(x=arf_human_id,y=arf_human_mt,col=auto_level))+geom_point()
###########################################################
###### fit linear mixed model 2 (series combination) ######
model <- lmer(arf_human_mt ~ series_mt + (1+auto_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 3 (parallel combination) ######
model <- lmer(arf_human_mt ~ parallel_mt + (1+auto_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 1 ######
model <- lmer(arf_human_mt ~ arf_human_id + (1+auto_num|part_id) + (1|part_id),
data = task_df)
summary(model)
# plot a scatter plot
plot(task_df$arf_human_id,task_df$arf_human_mt,
main='Regression Plot',
xlab='ARF Human ID', ylab='ARF Human Move Time (s)', col=task_df$auto_level)
# plot a regression line
abline(lm(arf_human_mt ~ arf_human_id, data=task_df), col='red')
ggplot(task_df,aes(x=arf_human_id,y=arf_human_mt,col=auto_level))+geom_point()
# ###########################################################
# ###### fit linear mixed model 2 (series combination) ######
# model <- lmer(arf_human_mt ~ series_mt + (1+auto_num|part_id) + (1|part_id),
#               data = task_df)
# summary(model)
#
#
# ###### fit linear mixed model 3 (parallel combination) ######
# model <- lmer(arf_human_mt ~ parallel_mt + (1+auto_num|part_id) + (1|part_id),
#               data = task_df)
# summary(model)
###### fit linear mixed model 1 ######
model <- lmer(arf_human_mt ~ arf_human_id + (1+auto_num|part_id) + (1|part_id),
data = task_df)
summary(model)
# plot a scatter plot
plot(task_df$arf_human_id,task_df$arf_human_mt,
main='Regression Plot',
xlab='ARF Human ID', ylab='ARF Human Move Time (s)', col=task_df$auto_level)
# plot a regression line
abline(lm(arf_human_mt ~ arf_human_id, data=task_df), col='red')
ggplot(task_df,aes(x=arf_human_id,y=arf_human_mt,col=auto_level),
xlab='ARF Human ID')+geom_point()
# ###########################################################
# ###### fit linear mixed model 2 (series combination) ######
# model <- lmer(arf_human_mt ~ series_mt + (1+auto_num|part_id) + (1|part_id),
#               data = task_df)
# summary(model)
#
#
# ###### fit linear mixed model 3 (parallel combination) ######
# model <- lmer(arf_human_mt ~ parallel_mt + (1+auto_num|part_id) + (1|part_id),
#               data = task_df)
# summary(model)
###### fit linear mixed model 1 ######
model <- lmer(arf_human_mt ~ arf_human_id + (1+auto_num|part_id) + (1|part_id),
data = task_df)
summary(model)
# plot a scatter plot
plot(task_df$arf_human_id,task_df$arf_human_mt,
main='Regression Plot',
xlab='ARF Human ID', ylab='ARF Human Move Time (s)', col=task_df$auto_level)
# plot a regression line
abline(lm(arf_human_mt ~ arf_human_id, data=task_df), col='red')
ggplot(task_df,aes(x=arf_human_id,y=arf_human_mt,col=auto_level))+geom_point()
# ###########################################################
# ###### fit linear mixed model 2 (series combination) ######
# model <- lmer(arf_human_mt ~ series_mt + (1+auto_num|part_id) + (1|part_id),
#               data = task_df)
# summary(model)
#
#
# ###### fit linear mixed model 3 (parallel combination) ######
# model <- lmer(arf_human_mt ~ parallel_mt + (1+auto_num|part_id) + (1|part_id),
#               data = task_df)
# summary(model)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id2", "med_fitts_id1", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(auto_level, ring_id) %>%
get_summary_stats(human_max_vel, type = "mean_sd")
bxp1 <- ggboxplot(
task_df, x = "ring_id", y = "human_max_vel",
color = "auto_level", palette = "jco"
)
bxp1
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id2", "med_fitts_id1", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(auto_level, ring_id) %>%
get_summary_stats(percent_overlap, type = "mean_sd")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id2", "med_fitts_id1", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(auto_level, ring_id) %>%
get_summary_stats(perf_index, type = "mean_sd")
bxp1 <- ggboxplot(
task_df, x = "fitts_id_level", y = "perf_index",
color = "auto_level", palette = "jco"
)
bxp1
######################### check for outliers #########################
task_df %>%
group_by(auto_level, ring_id) %>%
identify_outliers(perf_index)
######################### check normality #########################
task_df %>%
group_by(auto_level, ring_id) %>%
shapiro_test(perf_index)
######################### plot normality #########################
ggqqplot(task_df, "perf_index", ggtheme = theme_bw()) +
facet_grid(ring_id ~ auto_level, labeller = "label_both")
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(
data = task_df, dv = perf_index, wid = part_id,
within = c(auto_level, fitts_id_level)
)
get_anova_table(res.aov)
# #################### Effect of auto_level for each ring_id ####################
# one.way <- task_df %>%
#   group_by(ring_id) %>%
#   anova_test(dv = perf_index, wid = part_id, within = auto_level) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#
# #################### Effect of ring_id for each auto_level ####################
# one.way <- task_df %>%
#   group_by(auto_level) %>%
#   anova_test(dv = perf_index, wid = part_id, within = ring_id) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#################### Pairwise comparisons between auto_level groups for each ring_id ####################
pwc1 <- task_df %>%
group_by(fitts_id_level) %>%
pairwise_t_test(
perf_index ~ auto_level, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc1
# Create a box plot
pwc1 <- pwc1 %>% add_xy_position(x = "auto_level", group = "fitts_id_level")
bxp2 <- ggboxplot(
task_df, x = "auto_level", y = "perf_index",
color = "fitts_id_level", palette = "jco"
) +
stat_pvalue_manual(
pwc1, color = "fitts_id_level", group.by = "legend.var",
bracket.nudge.y = 0.2, step.increase = 0.15, label.size = 3, vjust = 0.1,
tip.length = 0, y.position = 20
)
bxp2
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(auto_level) %>%
pairwise_t_test(
perf_index ~ fitts_id_level, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc2
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "fitts_id_level", group = "auto_level")
bxp3 <- ggboxplot(
task_df, x = "fitts_id_level", y = "perf_index",
color = "auto_level", palette = "jco"
) +
stat_pvalue_manual(
pwc2, color = "auto_level", group.by = "legend.var",
bracket.nudge.y = 0.2, step.increase = 0.5, label.size = 3, vjust = 0.1,
tip.length = 0, y.position = 20
)
bxp3
# ###### fit linear mixed model 1 ######
model <- lmer(perf_index ~ auto_num * fitts_id_num + (1+auto_num|part_id) + (1+fitts_id_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### fit linear mixed model 2 ######
fit <- lm(perf_index ~ fitts_id_num * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = fitts_id_num, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="Fitts ID", y.label="Move time (s)",
modx.labels = c("low", "med", "high")
)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
library(readr)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(stats)
library(lme4)
library(dplyr)
library(ez)
library(ltm)
library(interactions)
library(lmerTest)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id2", "med_fitts_id1", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### get mean and sd (or se) #########################
task_df %>%
group_by(auto_level, ring_id) %>%
get_summary_stats(robot_lead, type = "mean_sd")
bxp1 <- ggboxplot(
task_df, x = "fitts_id_level", y = "robot_lead",
color = "auto_level", palette = "jco"
)
bxp1
######################### Two-way mixed ANOVA test #########################
res.aov <- anova_test(
data = task_df, dv = robot_lead, wid = part_id,
within = c(auto_level, ring_id)
)
get_anova_table(res.aov)
# #################### Effect of auto_level for each ring_id ####################
# one.way <- task_df %>%
#   group_by(ring_id) %>%
#   anova_test(dv = robot_lead, wid = part_id, within = auto_level) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#
# #################### Effect of ring_id for each auto_level ####################
# one.way <- task_df %>%
#   group_by(auto_level) %>%
#   anova_test(dv = robot_lead, wid = part_id, within = ring_id) %>%
#   get_anova_table() %>%
#   adjust_pvalue(method = "bonferroni")
# one.way
#################### Pairwise comparisons between auto_level groups for each ring_id ####################
pwc1 <- task_df %>%
group_by(fitts_id_level) %>%
pairwise_t_test(
robot_lead ~ auto_level, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc1
# Create a box plot
pwc1 <- pwc1 %>% add_xy_position(x = "auto_level", group = "fitts_id_level")
bxp2 <- ggboxplot(
task_df, x = "auto_level", y = "robot_lead",
color = "fitts_id_level", palette = "jco"
) +
stat_pvalue_manual(
pwc1, color = "fitts_id_level", group.by = "legend.var",
bracket.nudge.y = 0.2, step.increase = 0.15, label.size = 3, vjust = 0.1,
tip.length = 0, y.position = 20
)
bxp2
#################### Pairwise comparisons between ring_id groups for each auto_level ####################
pwc2 <- task_df %>%
group_by(auto_level) %>%
pairwise_t_test(
robot_lead ~ fitts_id_level, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc2
# Create a box plot
pwc2 <- pwc2 %>% add_xy_position(x = "fitts_id_level", group = "auto_level")
bxp3 <- ggboxplot(
task_df, x = "fitts_id_level", y = "robot_lead",
color = "auto_level", palette = "jco"
) +
stat_pvalue_manual(
pwc2, color = "auto_level", group.by = "legend.var",
bracket.nudge.y = 0.2, step.increase = 0.5, label.size = 3, vjust = 0.1,
tip.length = 0, y.position = 20
)
bxp3
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/micha/OneDrive/My_GitHub_Repos/AutonomyFitts/data/")
task_df <- read_csv("all_data.csv")
auto_levels_order <- c("low_auto", "med_auto", "high_auto")  # Replace these with your actual level names
fitts_id_levels_order <- c("low_fitts_id", "med_fitts_id2", "med_fitts_id1", "high_fitts_id")  # Replace these with your actual level names
# Reorder the factor levels of "auto_level" according to levels_order
task_df$auto_level <- factor(task_df$auto_level, levels = auto_levels_order)
# Reorder the factor levels of "fitts_id_level" according to levels_order
task_df$fitts_id_level <- factor(task_df$fitts_id_level, levels = fitts_id_levels_order)
######################### scatterplot #########################
p <- ggscatter(task_df, x = "arf_human_id", y = "arf_human_mt",
add = "reg.line",                                 # Add regression line
conf.int = TRUE,                                  # Add confidence interval
add.params = list(color = "blue",
fill = "lightgray"),
xlab = "ARF Human ID", ylab = "ARF Human Move Time (s)"
)
# + theme(plot.title = element_text(size = 15, face = "bold"),
#   axis.title.x = element_text(size = 28, face = "bold"),
#   axis.title.y = element_text(size = 28, face = "bold"),
#   axis.text = element_text(size = 24),
#   legend.title = element_text(size = 28),
#   legend.text = element_text(size = 28),
#   legend.position= "none")
# stat_cor(method = "pearson", label.x = 1.5, label.y = 7.5)  # Add correlation coefficient
p
# ggsave(file="pdfs/perf_trust_corr.pdf", plot=p, width=10, height=6)
######################### correlation test #########################
res <- cor.test(task_df$arf_human_id, task_df$arf_human_mt,
method = "pearson")
res
###### correlation by ring group ######
correlation_by_group <- task_df %>%
group_by(ring_id) %>%
summarise(correlation = cor(arf_human_id, arf_human_mt))
print(correlation_by_group)
###### fit linear mixed model 1 ######
model <- lmer(arf_human_mt ~ arf_human_id + (1+auto_num|part_id) + (1|part_id),
data = task_df)
summary(model)
# plot a scatter plot
plot(task_df$arf_human_id,task_df$arf_human_mt,
main='Regression Plot',
xlab='ARF Human ID', ylab='ARF Human Move Time (s)', col=task_df$auto_level)
# plot a regression line
abline(lm(arf_human_mt ~ arf_human_id, data=task_df), col='red')
ggplot(task_df,aes(x=arf_human_id,y=arf_human_mt,col=auto_level))+geom_point()
###########################################################
###### fit linear mixed model 2 (autonomy num) ######
model <- lmer(arf_human_mt ~ arf_human_id * auto_num + (1+arf_human_id|part_id) + (1+auto_num|part_id) + (1|part_id),
data = task_df)
summary(model)
###### for interaction plot ######
fit <- lm(arf_human_mt ~ arf_human_id * auto_level, data = task_df)
# summary(fit)
interact_plot(fit, pred = arf_human_id, modx = auto_level,
interval = TRUE, int.type = "confidence", int.width = .8,
plot.points = TRUE,
x.label="ARF Human ID", y.label="ARF Human Move time (s)",
modx.labels = c("low", "med", "high")
)
